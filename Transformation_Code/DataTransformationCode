import json
import boto3
from datetime import datetime
from io import StringIO
import pandas as pd


def album(data):
    album_list = []
    for row in data['items']:
        album_id = row['track']['album']['id']
        album_name = row['track']['album']['name']
        album_release_date = row['track']['album']['release_date']
        album_total_tracks = row['track']['album']['total_tracks']
        album_url = row['track']['album']['external_urls']['spotify']
        album_element = {'album_id': album_id, 'name': album_name, 'release_date': album_release_date,
                         'total_tracks': album_total_tracks, 'url': album_url}
        album_list.append(album_element)
    return album_list

def artist(data):
    artist_list = []
    for row in data['items']:
        for key, value in row.items():
            if key == "track":
                for artist in value['artists']:
                    artist_dict = {'artist_id': artist['id'], 'artist_name': artist['name'], 'external_url': artist['href']}
                    artist_list.append(artist_dict)
    return artist_list

def songs(data):
    song_list = []
    for row in data['items']:
        song_id = row['track']['id']
        song_name = row['track']['name']
        song_duration = row['track']['duration_ms']
        song_url = row['track']['external_urls']['spotify']
        song_popularity = row['track']['popularity']
        song_added = row['added_at']
        album_id = row['track']['album']['id']
        artist_id = row['track']['album']['artists'][0]['id']
        song_element = {'song_id': song_id, 'song_name': song_name, 'duration_ms': song_duration, 'url': song_url,
                        'popularity': song_popularity, 'song_added': song_added, 'album_id': album_id,
                        'artist_id': artist_id}
        song_list.append(song_element)

    return song_list

def lambda_handler(event, context):
    s3 = boto3.client('s3')
    Bucket = "spotify-etl-project-sandhya"
    Key = "raw_data/processed/"

    spotify_data = []
    spotify_keys = []
    
    response = s3.list_objects(Bucket=Bucket, Prefix=Key)
    
    # Check if 'Contents' key exists in the response
    if 'Contents' in response:
        for file in response['Contents']:
            file_key = file['Key']
            if file_key.split('.')[-1] == "json":
                response = s3.get_object(Bucket=Bucket, Key=file_key)
                content = response['Body']
                jsonObject = json.loads(content.read())
                spotify_data.append(jsonObject)
                spotify_keys.append(file_key)
    else:
        print(f"No objects found with prefix '{Key}' in bucket '{Bucket}'")

    # Rest of your processing logic remains unchanged
    # ...

    s3_resource = boto3.resource('s3')
    for key in spotify_keys:
        copy_source = {
            'Bucket': Bucket,
            'Key': key
        }
        s3_resource.meta.client.copy(copy_source, Bucket, 'raw_data/processed/' + key.split("/")[-1])
        s3_resource.Object(Bucket, key).delete()
